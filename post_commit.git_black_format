#!/bin/sh -e

if [ -n "${SKIP_GCF}" ]; then
  # Running inside of another black-format hook
  exit 0
fi

# Ensure black is installed
if ! command -v black >/dev/null 2>&1 ; then
  printf "\e[1;33mblack is not installed!\e[0m
  Install black to enable auto-formatting.
" >&2
  exit 0
fi

# Ensure tracked files which were modified have been added or stashed
if ! git diff-files --quiet ; then
  printf "\e[1;33mWill not run black format: repository is dirty\e[0m. \e[33m \
Stage (with 'git add') or stash (with 'git stash') all files before committing \
to apply formatting.\e[0m
" >&2
  exit 0
fi

# run black formatting
printf "\e[2;37;40mRunning black...\e[0m" >&2
BLACK_FORMAT_RESULT="$(black $(git ls-files *.py))"


if git diff-files --quiet ; then
  # if no difference in git tracked files, all fiiles formatted properly
  printf "\r\e[2;32mAll code changes were properly formatted\e[0m\n" >&2
else
  # else, print black formatted files and amend style changes to commit
  BAD_COMMIT=$(git rev-parse --short HEAD)
  printf "\r\e[0;33mCode formatting changes were required:\e[0m\n" >&2
  printf "${BLACK_FORMAT_RESULT}\n" >&2
  git add -u :/
  SKIP_GCF=1 git commit --amend -C HEAD >/dev/null
  GOOD_COMMIT=$(git rev-parse --short HEAD)
  printf "\e[2;37mTo view formatting changes:
    git diff ${BAD_COMMIT} ${GOOD_COMMIT}\e[0m
" >&2
fi
